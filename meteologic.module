<?php
/**
 * @file
 * Meteologic module.
 */

/**
 * Implements hook_help().
 */
function meteologic_help($path, $arg) {
  switch ($path) {
    case 'admin/help#meteologic':
      return t('Meteologic is primarily an API module. It provides a framework for consuming external feather feeds.');
  }
}

/**
 * Implements hook_permission().
 */
function meteologic_permission() {
  return array(
    'administer meteologic' => array(
      'title' => t('Administer Meteologic'),
      'description' => t('Configure the meteologic module.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function meteologic_menu() {
  $items = array();

  $items['admin/config/services/meteologic'] = array(
    'title' => 'Meteologic',
    'description' => 'Manage weather feeds.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('meteologic_settings_form'),
    'access arguments' => array('administer meteologic'),
    'file' => 'meteologic.admin.inc',
  );

  $items['admin/config/services/meteologic/default'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -50,
  );

  // Add settings forms for submodules.
  foreach (meteologic_forecast_providers() as $slug => $info) {
    if (isset($info['settings']) && !empty($info['settings'])) {
      $items["admin/config/services/meteologic/$slug"] = array(
        'title' => $info['name'],
        'page callback' => 'drupal_get_form',
        'page arguments' => array($info['settings']),
        'access arguments' => array('administer meteologic'),
        'type' => MENU_LOCAL_TASK,
      );
    }
  }

  $items['admin/config/services/meteologic/summary'] = array(
    'title' => 'Summary',
    'description' => 'Manage weather feeds.',
    'page callback' => 'meteologic_summary_page',
    'access arguments' => array('administer meteologic'),
    'file' => 'meteologic.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );

  return $items;
}

/**
/**
 * Implements hook_hook_info().
 */
function meteologic_hook_info() {
  return array(
    'meteologic_provider_info' => array(
      'group' => 'meteologic',
    ),
  );
}

/**
 * Returns a list of available forecast types.
 *
 * @return array
 *   An array of weather forecast types, keyed by machine name.
 */
function meteologic_forecast_types() {
  static $types;

  if (!isset($types)) {
    $types = array(
      'current' => t('Current Conditions'),
      'point' => t('Point Forecast'),
      'radar' => t('Radar'),
    );
  }

  // Enables hook_meteologic_forecast_type_alter().
  drupal_alter(array('meteologic_forecast_type'), $types);
  return $types;
}

/**
 * Returns a list of available forecast providers.
 *
 * @return array
 *   An array of weather forecast providers, keyed by machine name.
 */
function meteologic_forecast_providers() {
  static $providers;

  if (!isset($providers)) {
    $providers = array();

    foreach (module_implements('meteologic_provider_info') as $module) {
      $providers += module_invoke($module, 'meteologic_provider_info');
    }
  }

  return $providers;
}