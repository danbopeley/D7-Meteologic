<?php
/**
 * @file
 * Meteologic module.
 */

/**
 * Implements hook_help().
 */
function meteologic_help($path, $arg) {
  switch ($path) {
    case 'admin/help#meteologic':
      return t('Meteologic is primarily an API module. It provides a framework for providers to consume external feather feeds.');
    case 'admin/config/services/meteologic':
      return t('Here you can configure settings for your feeds, providers and general Meteologic behavior.');
    case 'admin/config/services/meteologic/feeds':
    case 'admin/config/services/meteologic/feeds/%':
      return t('Here you can configure settings for your feeds, including selecting a default provider.');
    case 'admin/config/services/meteologic/providers':
    case 'admin/config/services/meteologic/providers/%':
      return t('Here you can configure settings for your providers.');
    case 'admin/config/services/meteologic/update':
      return t('Here you can manually update all feeds. Please use this with caution!');
    case 'admin/config/services/meteologic/summary':
      return t('Here you can see a birds-eye view of what feeds and providers are enabled.');
  }
}

/**
 * Implements hook_permission().
 */
function meteologic_permission() {
  return array(
    'administer meteologic' => array(
      'title' => t('Administer Meteologic'),
      'description' => t('Configure the meteologic module.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function meteologic_menu() {
  $items = array();

  $items['admin/config/services/meteologic'] = array(
    'title' => 'Meteologic',
    'description' => 'Manage weather feeds.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('meteologic_form_settings'),
    'access arguments' => array('administer meteologic'),
    'file' => 'meteologic.admin.inc',
  );

  $items['admin/config/services/meteologic/default'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -50,
  );

  $items['admin/config/services/meteologic/providers'] = array(
    'title' => 'Providers',
    'page callback' => 'meteologic_page_providers',
    'access arguments' => array('administer meteologic'),
    'file' => 'meteologic.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/config/services/meteologic/providers/default'] = array(
    'title' => 'Home',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -50,
  );

  // Add settings forms for providers.
  foreach (meteologic_providers() as $slug => $info) {
    if (isset($info['settings']) && !empty($info['settings'])) {
      $items["admin/config/services/meteologic/providers/$slug"] = array(
        'title' => $info['name'],
        'page callback' => 'drupal_get_form',
        'page arguments' => array($info['settings']),
        'access arguments' => array('administer meteologic'),
        'type' => MENU_LOCAL_TASK,
      );
    }
  }

  $items['admin/config/services/meteologic/feeds'] = array(
    'title' => 'Feeds',
    'description' => 'Mangage feeds',
    'page callback' => 'meteologic_page_feeds',
    'access arguments' => array('administer meteologic'),
    'file' => 'meteologic.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/config/services/meteologic/feeds/default'] = array(
    'title' => 'Home',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -50,
  );

  // Add settings forms for feeds.
  foreach (meteologic_feeds() as $slug => $info) {
    $items["admin/config/services/meteologic/feeds/$slug"] = array(
      'title' => $info['name'],
      'page callback' => 'drupal_get_form',
      'page arguments' => array('meteologic_form_feed_config', $slug),
      'access arguments' => array('administer meteologic'),
      'file' => 'meteologic.admin.inc',
      'type' => MENU_LOCAL_TASK,
    );
  }

  $items['admin/config/services/meteologic/update'] = array(
    'title' => 'Update',
    'description' => 'Update weather feeds.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('meteologic_update_form'),
    'access arguments' => array('administer meteologic'),
    'file' => 'meteologic.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 49,
  );

  $items['admin/config/services/meteologic/summary'] = array(
    'title' => 'Summary',
    'description' => 'Meteologic configuration summary.',
    'page callback' => 'meteologic_summary_page',
    'access arguments' => array('administer meteologic'),
    'file' => 'meteologic.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );

  $metelogic_page_path = variable_get('metelogic_page_path', 'meteologic');

  if (variable_get('meteologic_page_enable', FALSE)) {
    // Generate custom pages.
    foreach (meteologic_feeds() as $feed => $feed_info) {
      if (variable_get('meteologic_feed_pages', FALSE)) {
        $providers = meteologic_providers();

        foreach ($feed_info['providers'] as $provider) {
          $items[$metelogic_page_path . "/{$feed}/{$provider}"] = array(
            'title' => "{$providers[$provider]['name']} {$feed_info['name']}",
            'page callback' => '_meteologic_render_page',
            'page arguments' => array(
              $feed,
              $provider,
              $providers[$provider]['feeds'][$feed]['theme']['page'],
            ),
            // @TODO do we really need specific permissions for each feed?
            'access arguments' => array('access content'),
          );
        }
      }
    }
  }

  return $items;
}

/**
 * Page callback.
 * This is just an intermediate step so we can properly add the data and pass
 * the render array along.
 *
 * @see meteologic_menu()
 */
function _meteologic_render_page($feed, $provider, $theme) {
  return array(
    '#theme' => $theme,
    '#pre_render' => array('meteologic_pre_render'),
    '#meteologic_feed' => $feed,
    '#meteologic_provider' => $provider,
  );
}

/**
 * Implements hook_cron().
 */
function meteologic_cron() {
  // Update forecasts.
  if (variable_get('meteologic_dev', TRUE)) {
    watchdog('meteologic', 'Starting cron forecast update', array(), WATCHDOG_INFO);
  }
  $queue = DrupalQueue::get('meteologic_update');

  foreach (meteologic_providers() as $provider) {
    $queue->createItem($provider);
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function meteologic_cron_queue_info() {
  return array(
    'meteologic_update' => array(
      'worker callback' => '_meteologic_update_feed',
      'time' => 60,
    ),
  );
}

/**
 * Implements hook_hook_info().
 */
function meteologic_hook_info() {
  return array(
    'meteologic_provider_info' => array(
      'group' => 'meteologic',
    ),
  );
}

/**
 * Implements hook_theme().
 */
function meteologic_theme() {
  $theme = array(
    'meteologic_form_feed_config' => array(
      'render element' => 'form',
      'file' => 'meteologic.theme.inc',
    ),
  );

  // Provide default theme implementations for default feeds.
  // Actually, don't.
//  foreach (meteologic_meteologic_feed_info() as $slug => $info) {
//    $theme["meteologic_default_{$slug}"] = array(
//      'variables' => array('data' => array()),
//      'file' => 'meteologic.theme.inc',
//    );
//  }

  return $theme;
}

/**
 * Implements hook_block_info().
 */
function meteologic_block_info() {
  $info = array();
  $feeds = meteologic_feeds();

  foreach ($feeds as $feed => $feed_info) {
    // Generate standard block for each feed, but only if it has at least
    // one provider.

    if (!empty($feed_info['providers'])) {
      $info[$feed] = array(
        'info' => t('Meteologic: @feed', array('@feed' => $feed_info['name'])),
        'cache' => DRUPAL_CACHE_GLOBAL,
      );

      // Generate a specific block for each feed/provider combination.
      if (variable_get('meteologic_feed_blocks', FALSE)) {
        $providers = meteologic_providers();

        foreach ($feed_info['providers'] as $provider) {
          $info["{$feed}___{$provider}"] = array(
            'info' => t('Meteologic Extra: @feed by @provider', array(
              '@feed' => $feed_info['name'],
              '@provider' => $providers[$provider]['name'],
            )),
            'cache' => DRUPAL_CACHE_GLOBAL,
          );
        }
      }
    }
  }

  return $info;
}

/**
 * Implements hook_block_view().
 */
function meteologic_block_view($delta = '') {
  $block = array();
  $feeds = meteologic_feeds();

  // Are we displaying the standard block?
  if (array_key_exists($delta, $feeds)) {
    $feed = $delta;
    $provider = meteologic_provider_default($delta);
    $provider_info = meteologic_providers($provider);
    $subject = $feeds[$feed]['name'];
  }
  else {
    list($feed, $provider) = explode('___', $delta);
    $provider_info = meteologic_providers($provider);
    $subject = "{$provider_info['name']} {$feeds[$feed]['name']}";
  }

  if (isset($provider_info['feeds'][$feed]['theme']['block'])) {
    $theme_callback = $provider_info['feeds'][$feed]['theme']['block'];

    $block['subject'] = $subject;
    $block['content'] = array(
      '#theme' => $theme_callback,
      '#pre_render' => array('meteologic_pre_render'),
      '#meteologic_feed' => $feed,
      '#meteologic_provider' => $provider,
    );

    return $block;
  }

  // If we get this far something went wrong.
  watchdog('meteologic', 'Missing theme callback for feed: %feed from provider: %provider', array(
    '%feed' => $feeds[$feed]['name'],
    '%provider' => $provider_info['name'],
    ), WATCHDOG_ERROR);
  return array();
}

/**
 * Pre render callback.
 * Used to populate the #data variable before rendering feed data.
 *
 * @see meteologic_block_view()
 */
function meteologic_pre_render($elements) {
  $elements['#data'] = meteologic_get_data($elements['#meteologic_feed'], $elements['#meteologic_provider']);
  return $elements;
}

/**
 * Returns information on either a specified feed or all of them.
 *
 * @param string
 *   A feed name.
 * @return array
 *   An array of feed information, keyed by name.
 */
function meteologic_feeds($feed = NULL) {
  static $feeds;
  $providers = meteologic_providers();

  if (!isset($feeds)) {
    $feeds = array();

    foreach (module_implements('meteologic_feed_info') as $module) {
      foreach (module_invoke($module, 'meteologic_feed_info') as $name => $info) {
        $feeds[$name] = $info;
        // Find providers of this feed.
        $feeds[$name]['providers'] = array();

        foreach ($providers as $provider_slug => $provider_info) {
          if (array_key_exists($name, $provider_info['feeds'])) {
            $feeds[$name]['providers'][$provider_slug] = array(
              'name' => $provider_info['name'],
              'enabled' => variable_get("meteologic_{$name}_{$provider_slug}", FALSE),
            );
          }
        }
      }
    }
  }

  return isset($feed) ? $feeds[$feed] : $feeds;
}

/**
 * Implements hook_meteologic_feed_info().
 *
 * Define our default feeds.
 *
 * @see meteologic_feeds()
 */
function meteologic_meteologic_feed_info() {
  return array(
    'current' => array(
      'name' => t('Current conditions'),
//      'block' => TRUE,
//      'page' => TRUE,
    ),
    'point' => array(
      'name' => t('Point forecast'),
    ),
    'radar' => array(
      'name' => t('Radar'),
    ),
    'marine' => array(
      'name' => t('Marine'),
    ),
    'extended' => array(
      'name' => t('Extended forecast'),
    ),
    'tidal' => array(
      'name' => t('Tidal'),
    ),
    'snow' => array(
      'name' => t('Snow'),
    ),
  );
}

/**
 * Returns information on either a specified provider or all of them.
 *
 * @param string
 *   A provider name.
 * @return array
 *   An array of provider information, keyed by name.
 */
function meteologic_providers($provider = NULL) {
  static $providers;

  if (!isset($providers)) {
    $providers = array();

    foreach (module_implements('meteologic_provider_info') as $module) {
      foreach (module_invoke($module, 'meteologic_provider_info') as $name => $info) {
        $providers[$name] = $info;
        $providers[$name]['module'] = $module;
      }
    }
  }

  return isset($provider) ? $providers[$provider] : $providers;
}

/**
 * Updates forecast information for the selected providers.
 *
 * @param array
 *   An array of provider machine names.
 */
function meteologic_update_feeds(array $providers) {
  // Use Batch API to update each one.
  batch_set(array(
    'title' => t('Updating Meteologic feeds...'),
    'operations' => array(
      array('meteologic_update_feeds_batch', $providers)
    ),
    'progress_message' => t('Updated @current of @total.'),
    'error_message' => t('An error has occurred updating feed information. Please check the site logs for more information.'),
    'finished' => 'meteologic_update_feeds_batch_finished',
  ));

  // Start batch and redirect to update form when we're done.
  batch_process('admin/config/services/meteologic/update');
}

/**
 * Batch operation callback.
 * Updates forecast information for each provider.
 *
 * @see meteologic_update_feeds()
 */
function meteologic_update_feeds_batch($providers, &$context) {
  // Init sandbox info.
  if (empty($context['sandbox'])) {
    $context['sandbox'] = array();
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = count($providers);
  }

  // Process a single provider.
  $current = $providers[$context['sandbox']['progress']];
  // @TODO store errors somewhere to display after batch finishes?
  _meteologic_update_feed($current);
  ++$context['sandbox']['progress'];

  // Check if the batch is finished
  if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Batch finished callback.
 * Display confirmation message once update batch operation finished.
 *
 * @see meteologic_update_feeds()
 */
function meteologic_update_feeds_batch_finished($success, $results, $operations, $elapsed) {
  if ($success) {
    drupal_set_message(t('Updated forecast information!'));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }
}

/**
 * Updates forecast information for a specific feed.
 * This function shouldn't be called directly unless you know what you are
 * doing! If all you want to do is update the forecast information manually
 * please consider visiting the settings page at "admin/config/services/update".
 *
 * @param string
 *   The feed's machine name.
 * @param string
 *   The provider's machine name.
 * @return boolean
 *   Whether the update was successful or not.
 */
function _meteologic_update_feed($feed, $provider = NULL) {
  return is_array(meteologic_get_data($feed, $provider, TRUE));
}

/**
 * Returns data for a given feed.
 *
 * @param string
 *   The feed.
 * @param string
 *   Optionally specify a provider to return the feed data for and if left out,
 *    return results for the default provider.
 * @param boolean
 *   Optionally, bypass caches and return a fresh result.
 * @return array|FALSE
 *   An array of feed data, or FALSE something went wrong.
 */
function meteologic_get_data($feed, $provider = NULL, $reset = FALSE) {
  // Good ol' static cache.
  static $results;

  // Store parameter for later.
  $has_provider = isset($provider);

  if (!$has_provider) {
    if (!$provider = meteologic_provider_default($feed)) {
      return FALSE;
    }
  }

  // Check static cache.
  if (!$reset && isset($results[$feed][$provider])) {
    return $results[$feed][$provider];
  }

  // Load provider info.
  if ($provider_info = meteologic_providers($provider)) {
    if (isset($provider_info['feeds'][$feed]['path'])) {
      // Replace tokens.
//      if ($station = variable_get("meteologic_{$feed}_{$provider}_station", NULL)) {
      if ($station = 'KASE') { // @TODO remove this.
        $path = str_replace('@station', $station, $provider_info['feeds'][$feed]['path']);
        $cache_key = "meteologic_{$feed}_{$provider}_result";

        // @TODO implement authentication for any feeds that require it.
        // Will do when we run into this scenario.

        // Check Drupal's cache.
        if (!$reset && $cache = cache_get($cache_key)) {
          if (!empty($cache->data)) {
            $results[$feed][$provider] = $cache->data;
            return $cache->data;
          }
        }

        // Let' try to keep it simple for now.
        if ($xml = simplexml_load_file($path)) {
          // Convert XML to array.
          // @see http://gaarf.info/2009/08/13/xml-string-to-php-array/
          $array = json_decode(json_encode((array) $xml), 1);
          // We use the permanent cache because the data gets updated during
          // cron runs anyway.
          cache_set($cache_key, $array, 'cache', CACHE_PERMANENT);
          $results[$feed][$provider] = $array;

          if (variable_get('meteologic_dev', TRUE)) {
            $feed_info = meteologic_feeds($feed);
            watchdog('meteologic', 'Retrieved data for feed: %feed from provider: %provider', array(
              '%feed' => $feed_info['name'],
              '%provider' => $provider_info['name'],
              ), WATCHDOG_INFO);
          }
          return $array;
        }
        else if (!$has_provider) {
          // @TODO check for fallback option & feed.
        }
        else {
          $feed_info = meteologic_feeds($feed);
          watchdog('meteologic', 'Failed to get data for feed: %feed from provider: %provider', array(
            '%feed' => $feed_info['name'],
            '%provider' => $provider_info['name'],
            ), WATCHDOG_ERROR);
        }
      }
    }
  }

  return FALSE;
}

/**
 * Returns the default provider for a given feed.
 *
 * @param string
 *   The feed.
 * @return string|FALSE
 *   The default provider or FALSE if we couldn't find it.
 */
function meteologic_provider_default($feed) {
  // Load default provider.
  $provider = reset(array_keys(variable_get("meteologic_weight_{$feed}", array())));

  // If weights have never been set we need to figure it out ourselves.
  if (empty($provider)) {
    $feed_info = meteologic_feeds($feed);
    if (!empty($feed_info['providers'])) {
      $provider = reset($feed_info['providers']);
    }
  }

  return !empty($provider) ? $provider : FALSE;
}